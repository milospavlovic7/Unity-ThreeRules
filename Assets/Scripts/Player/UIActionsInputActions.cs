//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/UIActionsInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIActionsInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIActionsInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIActionsInputActions"",
    ""maps"": [
        {
            ""name"": ""UIActions"",
            ""id"": ""65aabb92-8f17-42c0-a262-45942e048765"",
            ""actions"": [
                {
                    ""name"": ""SelectItem1"",
                    ""type"": ""Button"",
                    ""id"": ""4b819032-8cc6-4a49-b68a-5b7f463f0ece"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectItem2"",
                    ""type"": ""Button"",
                    ""id"": ""4977df41-6f5f-4871-91c5-4fe88319ae9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectItem3"",
                    ""type"": ""Button"",
                    ""id"": ""6b48af7f-45f7-4925-80b1-4139cb70610e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem"",
                    ""type"": ""Button"",
                    ""id"": ""dc8a8d5e-fdfb-4492-9f38-df24873d1602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51f99958-df06-48ee-b720-e3776236eed6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a15cba57-c2d9-481b-96e8-168518085b5b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""697ff1d6-9145-4fa5-9872-31dfc1b05590"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectItem3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""650b704a-f900-45fd-8995-2246c60c895f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UIActions
        m_UIActions = asset.FindActionMap("UIActions", throwIfNotFound: true);
        m_UIActions_SelectItem1 = m_UIActions.FindAction("SelectItem1", throwIfNotFound: true);
        m_UIActions_SelectItem2 = m_UIActions.FindAction("SelectItem2", throwIfNotFound: true);
        m_UIActions_SelectItem3 = m_UIActions.FindAction("SelectItem3", throwIfNotFound: true);
        m_UIActions_ActivateItem = m_UIActions.FindAction("ActivateItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIActions
    private readonly InputActionMap m_UIActions;
    private List<IUIActionsActions> m_UIActionsActionsCallbackInterfaces = new List<IUIActionsActions>();
    private readonly InputAction m_UIActions_SelectItem1;
    private readonly InputAction m_UIActions_SelectItem2;
    private readonly InputAction m_UIActions_SelectItem3;
    private readonly InputAction m_UIActions_ActivateItem;
    public struct UIActionsActions
    {
        private @UIActionsInputActions m_Wrapper;
        public UIActionsActions(@UIActionsInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectItem1 => m_Wrapper.m_UIActions_SelectItem1;
        public InputAction @SelectItem2 => m_Wrapper.m_UIActions_SelectItem2;
        public InputAction @SelectItem3 => m_Wrapper.m_UIActions_SelectItem3;
        public InputAction @ActivateItem => m_Wrapper.m_UIActions_ActivateItem;
        public InputActionMap Get() { return m_Wrapper.m_UIActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionsActions set) { return set.Get(); }
        public void AddCallbacks(IUIActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsActionsCallbackInterfaces.Add(instance);
            @SelectItem1.started += instance.OnSelectItem1;
            @SelectItem1.performed += instance.OnSelectItem1;
            @SelectItem1.canceled += instance.OnSelectItem1;
            @SelectItem2.started += instance.OnSelectItem2;
            @SelectItem2.performed += instance.OnSelectItem2;
            @SelectItem2.canceled += instance.OnSelectItem2;
            @SelectItem3.started += instance.OnSelectItem3;
            @SelectItem3.performed += instance.OnSelectItem3;
            @SelectItem3.canceled += instance.OnSelectItem3;
            @ActivateItem.started += instance.OnActivateItem;
            @ActivateItem.performed += instance.OnActivateItem;
            @ActivateItem.canceled += instance.OnActivateItem;
        }

        private void UnregisterCallbacks(IUIActionsActions instance)
        {
            @SelectItem1.started -= instance.OnSelectItem1;
            @SelectItem1.performed -= instance.OnSelectItem1;
            @SelectItem1.canceled -= instance.OnSelectItem1;
            @SelectItem2.started -= instance.OnSelectItem2;
            @SelectItem2.performed -= instance.OnSelectItem2;
            @SelectItem2.canceled -= instance.OnSelectItem2;
            @SelectItem3.started -= instance.OnSelectItem3;
            @SelectItem3.performed -= instance.OnSelectItem3;
            @SelectItem3.canceled -= instance.OnSelectItem3;
            @ActivateItem.started -= instance.OnActivateItem;
            @ActivateItem.performed -= instance.OnActivateItem;
            @ActivateItem.canceled -= instance.OnActivateItem;
        }

        public void RemoveCallbacks(IUIActionsActions instance)
        {
            if (m_Wrapper.m_UIActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActionsActions @UIActions => new UIActionsActions(this);
    public interface IUIActionsActions
    {
        void OnSelectItem1(InputAction.CallbackContext context);
        void OnSelectItem2(InputAction.CallbackContext context);
        void OnSelectItem3(InputAction.CallbackContext context);
        void OnActivateItem(InputAction.CallbackContext context);
    }
}
